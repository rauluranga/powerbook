#!/usr/bin/env bash

export POWERBOOK="${HOME}/.powerbook"
export POWERBOOK_LOG="${HOME}/Library/Logs/powerbook.log"
export GITHUB_USER="rauluranga"

# If missing, download and extract the powerbook repository
if [[ ! -d "${POWERBOOK}" ]]; then

    # no bash directory found
    printf "$(tput bold ; tput setaf 3)⚠ Warning: $(tput sgr0)%s!\n" "No ${POWERBOOK} found"

    # create directory
    printf "$(tput setaf 6)┃ $(tput sgr0)$(tput setaf 7)%s...$(tput sgr0)\n" "Creating directory at ${POWERBOOK}"
    mkdir -p "${POWERBOOK}"

    # Download the repository as a tarball
    printf "$(tput setaf 6)┃ $(tput sgr0)$(tput setaf 7)%s...$(tput sgr0)\n" "Downloading repository to /tmp directory"
    # (-#) shows the progress bar as # sign
    # (-f) fail silently
    # (-L) follow the headers
    # (-o) output to a file
    curl -#fLo /tmp/powerbook.tar.gz "https://github.com/${GITHUB_USER}/powerbook/tarball/master"
    # (-s) silent mode, show no errors or progress
    # (-S) with -s, only show the errors
    # curl -fsSLo /tmp/powerbook.tar.gz "https://github.com/${GITHUB_USER}/powerbook/tarball/master"

    # Extract to the powerbook directory
    printf "$(tput setaf 6)┃ $(tput sgr0)$(tput setaf 7)%s...$(tput sgr0)\n" "Extracting files to ${POWERBOOK}"
    tar -zxf /tmp/powerbook.tar.gz --strip-components 1 -C "${POWERBOOK}"

    # Remove the tarball
    printf "$(tput setaf 6)┃ $(tput sgr0)$(tput setaf 7)%s...$(tput sgr0)\n" "Removing tarball from /tmp directory"
    rm -rf /tmp/powerbook.tar.gz

    printf "$(tput setaf 2)✓ Success: $(tput sgr0)%s.\n" "${POWERBOOK} created, repository downloaded and extracted"
fi


# Change to the powerbook directory
cd "${POWERBOOK}"

# Help text
source ./lib/help
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Source the necessary files and helper scripts
source ./bin/brew
source ./bin/cask
source ./bin/font
source ./bin/quicklook
source ./lib/git
source ./lib/ruby
source ./lib/utils

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    printf "  run 'xcode-select --install' and follow the instrucctions\n"
    printf "  Then run this setup script again.\n"
    exit 1
fi

#     __  __                     __                     
#    / / / /___  ____ ___  ___  / /_  ________ _      __
#   / /_/ / __ \/ __ `__ \/ _ \/ __ \/ ___/ _ \ | /| / /
#  / __  / /_/ / / / / / /  __/ /_/ / /  /  __/ |/ |/ / 
# /_/ /_/\____/_/ /_/ /_/\___/_.___/_/   \___/|__/|__/  
                                                      

# Check for Homebrew
if ! type_exists 'brew'; then
    e_process "Installing Homebrew..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    # Install Homebrew formulae via Brewfile
    e_process "Installing Homebrew packages"
    run_brew
fi

#          __                                          __  
#   ____  / /_        ____ ___  __  __     ____  _____/ /_ 
#  / __ \/ __ \______/ __ `__ \/ / / /____/_  / / ___/ __ \
# / /_/ / / / /_____/ / / / / / /_/ /_____// /_(__  ) / / /
# \____/_/ /_/     /_/ /_/ /_/\__, /      /___/____/_/ /_/ 
#                            /____/                        

if [ ! -d "${HOME}/.oh-my-zsh" ]; then
    e_process "Installing oh-my-zsh"

    #Install oh-my-zsh
    curl -L http://install.ohmyz.sh | sh

    #setup rbenv
    if ! grep -qs "rbenv init" ~/.zshrc; then
        printf 'export PATH="$HOME/.rbenv/bin:$PATH"\n' >> ~/.zshrc
        printf 'eval "$(rbenv init - --no-rehash)"\n' >> ~/.zshrc

        e_process "Enable shims and autocompletion ..."
        eval "$(rbenv init - --no-rehash)"
    fi

    export PATH="$HOME/.rbenv/bin:$PATH"
fi

#     ____        __         
#    / __ \__  __/ /_  __  __
#   / /_/ / / / / __ \/ / / /
#  / _, _/ /_/ / /_/ / /_/ / 
# /_/ |_|\__,_/_.___/\__, /  
#                   /____/   


e_process "Installing ruby & gem files"

# Check for rbenv
if type_exists 'rbenv'; then

    # Install Ruby
    run_ruby

else
    printf "\n"
    e_error "Error: rbenv not found."
    printf "Aborting...\n"
    exit
fi

e_success "All packages have been installed"

#        __      __  _____ __         
#   ____/ /___  / /_/ __(_) /__  _____
#  / __  / __ \/ __/ /_/ / / _ \/ ___/
# / /_/ / /_/ / /_/ __/ / /  __(__  ) 
# \__,_/\____/\__/_/ /_/_/\___/____/  
                                    

# Ask before potentially overwriting files
seek_confirmation "This step may overwrite your existing dotfiles"

if is_confirmed; then
    # Symlink all necessary files
    homesick clone ${GITHUB_USER}/dotfiles
    homesick symlink dotfiles

    e_success "All files have been symlinked"

    # Setup git authorship
    setup_git_author

else
    e_error "This step is required.  When you're ready, run this script to start up again"
fi


#   _  ______  ___  ____     ______
#  / |/ / __ \/ _ \/ __/ __ / / __/
# /    / /_/ / // / _/  / // /\ \  
#/_/|_/\____/____/___/  \___/___/  
#

if [ ! -d "${HOME}/.nvm}" ]; then
    
    mkdir -p "${HOME}/.nvm"
    
    export NVM_DIR=~/.nvm
    source $(brew --prefix nvm)/nvm.sh

    node_version="0.10.32"
    
    e_process "Installing Node v$node_version ..."
      nvm install -s "v$node_version"
    
    e_process "Setting Node v$node_version as default  ..."
       nvm alias default "$node_version"
       
    e_process "Updating NPM version ..."
      sudo npm install -g npm
      
    e_process "Installing Gulp, Bower & BumpVersion"
      npm install -g bower gulp bumpversion
fi



#    ____  _____    _  __    ___                    
#   / __ \/ ___/   | |/ /   /   |  ____  ____  _____
#  / / / /\__ \    |   /   / /| | / __ \/ __ \/ ___/
# / /_/ /___/ /   /   |   / ___ |/ /_/ / /_/ (__  ) 
# \____//____/   /_/|_|  /_/  |_/ .___/ .___/____/  
#                              /_/   /_/            

# Ask installing OS X Applications?
seek_confirmation "Do you want to install Mac OS X Applications?"

if is_confirmed; then

    e_process "Installing Mac OS X Applications"
    run_apps
    
    e_process "Installing Mac OS X fonts"
    run_fonts

    e_process "Installing Mac OS X Quick Look plugins for developers"
    run_ql

    e_success "All Mac OS X Applications have been installed"

    e_warning "Please consider using cask commands for Updating/Upgrading or Uninstalling a Mac OS X Application"
fi

figlet -k 'Enjoy!' | cowsay -f moose -n | toilet --gay -f term   

e_success "Your MAC is ready to rock!"



